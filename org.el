;; Run with:
;;
;;   emacs -Q -nw -l ../../util/director-bootstrap.el -l demo.el

(director-bootstrap
 :user-dir "/tmp/director-demo"
 :packages '()
 :load-path '("../.."))

(director-run
 :version 1
 :before-start (lambda ()
                 (switch-to-buffer (get-buffer-create "*example*"))
                 (menu-bar-mode -1)
                 (org-mode))
 :after-step (nil)
 :steps '(
          (:type "* This is our first headline")
	  (:type [return])
	  (:type "Under headline you can write some text.")
	  (:type [return])
	  (:type "Then You can fold text under a headline.")
	  (:type "\C-p")
	  (:type "\C-p")
	  (:type "\C-p")
	  (:type [tab])
	  (:type [tab])
	  (:type [tab])
	  (:call org-insert-heading-respect-content)
	  (:type "Second headline")
	  (:type [return])
	  (:type "We have created a second headline.")
	  (:call org-insert-heading-respect-content)
	  (:type "Third headline")
	  (:type [return])
	  (:type "We can fold & unfold them all together.")
	  (:call outline-hide-sublevels)
	  (:wait 1.5)
	  (:call org-show-all)
	  (:wait 1.5)
	  (:call outline-hide-sublevels)	
	  (:type [return])
	  (:call org-insert-heading-respect-content)
	  (:type "Moving headlines up & down")
	  (:type [return])
	  (:type "You can change order of headlines moving them up & down.")
	  (:call previous-line)
	  (:type [tab])
	  (:call org-move-subtree-up)
	  (:call org-move-subtree-up)
	  (:call org-move-subtree-up)
	  (:type [tab])
	  (:type [tab])
	  (:call next-line)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:type [tab])
	  (:type [tab])
	  (:call org-insert-heading-respect-content)
	  (:type "Moving headlines left & right")
 	  (:type [return])
	  (:type "So far we created a few level 1 headlines.")
 	  (:call org-insert-heading-respect-content)
	  (:type "Moving headline to right")
	  (:call org-do-demote)
	  (:type [return])
	  (:type "That's headline level 2. ")
	  (:type "Every level is indented more than previous.")
	  (:type [return])
	  (:type "Folding level 1 headline will fold all headlines below.")
	  (:call outline-up-heading)
	  (:type [tab])
	  (:wait 1.5)
	  (:type [tab])
	  (:wait 1.5)
	  (:call org-next-visible-heading)
 	  (:call org-insert-heading-respect-content)
	  (:type "Moving headline to left")
	  (:type [return])
	  (:type "Moving this headline to left will promote it to level 1.")
	  (:call outline-up-heading)
	  (:type [tab])
	  (:wait 1.5)
	  (:type [tab])
	  (:wait 1.5)
	  (:call outline-next-visible-heading)
	  (:call outline-next-visible-heading)
	  (:call org-do-promote)
	  (:wait 2)
	  (:call outline-hide-sublevels)
 	  (:wait 2)
	  (:call org-show-all)
	  (:wait 2)
	  (:call outline-hide-sublevels)
	  (:call org-insert-heading-respect-content)
	  (:type "Moving headlines")
	  (:type [return])
	  (:type "Let's organize our knowledge about moving headlines.")
	  (:call beginning-of-buffer)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:call org-do-demote)
	  (:call outline-up-heading)
	  (:call previous-line)
	  (:call previous-line)
	  (:call org-move-subtree-down)
	  (:call org-move-subtree-down)
	  (:call org-demote-subtree)
	  (:call outline-up-heading)
	  (:call previous-line)
	  (:call org-move-subtree-down)
	  (:call org-demote-subtree)
	  (:call outline-up-heading)
	  (:wait 2)
	  (:call org-show-all)
	  (:wait 2)
	  (:call outline-hide-sublevels)	
	  (:wait 2)
)
 :typing-style 'human
 :delay-between-steps 0.5
 :after-end (lambda () (kill-emacs 0))
 :on-error (lambda () (kill-emacs 1)))
